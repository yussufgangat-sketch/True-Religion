"use client";

import { useState } from "react";
import Link from "next/link";
import { useCart } from "@/contexts/CartContext";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { ChevronLeft, CreditCard, Shield, Mail, User, MapPin, Phone } from "lucide-react";

export default function CheckoutPage() {
  const { state, dispatch } = useCart();
  const router = useRouter();
  const [step, setStep] = useState(1);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submissionError, setSubmissionError] = useState("");
  const [formData, setFormData] = useState({
    email: "",
    firstName: "",
    lastName: "",
    address: "",
    city: "",
    postalCode: "",
    phone: "",
    cardNumber: "",
    expiryDate: "",
    cvv: "",
  });

  const subtotal = state.items.reduce((total, item) => total + (item.price * item.quantity), 0);
  const vatAmount = subtotal * 0.15; // 15% VAT
  const total = subtotal + vatAmount;

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    
    // Special handling for CVV field
    if (name === 'cvv') {
      // Only allow numbers and limit to 3 digits
      const numericValue = value.replace(/\D/g, '');
      if (numericValue.length <= 3) {
        setFormData({
          ...formData,
          [name]: numericValue,
        });
      }
      return;
    }
    
    // Special handling for card number (remove spaces and limit to 16 digits)
    if (name === 'cardNumber') {
      const numericValue = value.replace(/\D/g, '');
      if (numericValue.length <= 16) {
        // Format with spaces every 4 digits
        const formattedValue = numericValue.replace(/(\d{4})(?=\d)/g, '$1 ');
        setFormData({
          ...formData,
          [name]: formattedValue,
        });
      }
      return;
    }
    
    // Special handling for expiry date (format as MM/YY)
    if (name === 'expiryDate') {
      const numericValue = value.replace(/\D/g, '');
      if (numericValue.length <= 4) {
        let formattedValue = numericValue;
        if (numericValue.length >= 2) {
          formattedValue = numericValue.slice(0, 2) + '/' + numericValue.slice(2);
        }
        setFormData({
          ...formData,
          [name]: formattedValue,
        });
      }
      return;
    }
    
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const processOrder = async (orderData: any) => {
    try {
      console.log('🔄 Processing order...');
      console.log('📝 Order data:', JSON.stringify(orderData, null, 2));
      console.log('📝 Form data:', JSON.stringify(formData, null, 2));
      
      // Use the real process-order API
      console.log('🚀 Using real process-order API...');
      const response = await fetch('/api/process-order', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          orderData: {
            ...orderData,
            address: formData.address,
            city: formData.city,
            postalCode: formData.postalCode,
            phone: formData.phone,
          },
          customerEmail: formData.email,
          customerName: `${formData.firstName} ${formData.lastName}`,
        }),
      });

      console.log('📡 Response status:', response.status);
      console.log('📡 Response ok:', response.ok);

      if (!response.ok) {
        const errorData = await response.json();
        console.error('❌ Order processing failed:', errorData);
        console.error('❌ Response status:', response.status);
        console.error('❌ Response headers:', Object.fromEntries(response.headers.entries()));
        throw new Error(errorData.error || `Order processing failed with status ${response.status}`);
      }

      const result = await response.json();
      console.log('✅ Order processed successfully:', result);
      console.log('✅ Order ID:', result.orderId);
      return true;
      
    } catch (error) {
      console.error('❌ Error processing order:', error);
      throw error;
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    console.log('🎯 HANDLE SUBMIT CALLED!');
    console.log('📝 Current step:', step);
    console.log('📝 Is submitting:', isSubmitting);
    
    e.preventDefault();
    
    if (step === 1) {
      console.log('➡️ Moving to step 2');
      setStep(2);
    } else {
      console.log('🚀 Starting order submission...');
      console.log('📝 Form data:', formData);
      console.log('📝 Cart items:', state.items);
      
      setIsSubmitting(true);
      
      // Create order data - order ID will be generated by the API
      const orderData = {
        items: state.items,
        subtotal,
        vatAmount,
        total,
        customerInfo: {
          name: `${formData.firstName} ${formData.lastName}`,
          email: formData.email,
          address: formData.address,
          city: formData.city,
          postalCode: formData.postalCode,
          phone: formData.phone,
        }
      };

      try {
        console.log('🔄 Starting order processing...');
        console.log('📦 Order data:', JSON.stringify(orderData, null, 2));
        // Process order (single API call)
        const success = await processOrder(orderData);
        console.log('📧 Order result:', success);
        
        if (success) {
          console.log('🛒 Clearing cart and redirecting...');
          // Clear cart and redirect
          dispatch({ type: "CLEAR_CART" });
          setIsSubmitting(false); // Reset submitting state
          
          console.log('🚀 Attempting to redirect to success page...');
          try {
            await router.push('/checkout/success?email=sent');
            console.log('✅ Redirect successful');
          } catch (redirectError) {
            console.error('❌ Redirect failed:', redirectError);
            // Fallback: use window.location
            window.location.href = '/checkout/success?email=sent';
          }
          console.log('✅ Order completed successfully');
        } else {
          throw new Error('Order processing returned false');
        }
      } catch (error) {
        console.error('❌ Order processing failed:', error);
        console.error('❌ Error details:', {
          message: error instanceof Error ? error.message : 'Unknown error',
          stack: error instanceof Error ? error.stack : undefined,
          error: error
        });
        setIsSubmitting(false); // Reset submitting state
        if (error instanceof Error) {
          setSubmissionError(`Order failed: ${error.message}`);
        } else if (typeof error === 'string') {
          setSubmissionError(`Order failed: ${error}`);
        } else {
          setSubmissionError('Order failed: Unknown error');
        }
      }
    }
  };

  if (state.items.length === 0) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4">🛒</div>
          <h1 className="text-2xl font-bold text-gray-900 mb-4">Your cart is empty</h1>
          <p className="text-gray-600 mb-8">Add some items to your cart to continue shopping</p>
          <Link
            href="/products"
            className="inline-flex items-center px-6 py-3 bg-red-600 text-white font-semibold rounded-lg hover:bg-red-700 transition-colors"
          >
            <ChevronLeft className="w-4 h-4 mr-2" />
            Continue Shopping
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <Link href="/" className="text-2xl font-bold text-gray-900 tracking-wider">
              TRUE RELIGION
            </Link>
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold ${
                  step >= 1 ? 'bg-red-600 text-white' : 'bg-gray-200 text-gray-600'
                }`}>
                  1
                </div>
                <span className="text-sm font-medium text-black">Customer Info</span>
              </div>
              <div className="w-8 h-0.5 bg-gray-300"></div>
              <div className="flex items-center space-x-2">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold ${
                  step >= 2 ? 'bg-red-600 text-white' : 'bg-gray-200 text-gray-600'
                }`}>
                  2
                </div>
                <span className="text-sm font-medium text-black">Order Summary</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="max-w-4xl mx-auto">
          {/* Main Content */}
          <div>
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">
                {step === 1 ? "Customer Information" : "Order Summary"}
              </h2>

              <form onSubmit={handleSubmit} className="space-y-6">
                {step === 1 ? (
                  <>
                    <div>
                      <label className="block text-sm font-semibold text-gray-700 mb-2">
                        <Mail className="inline w-4 h-4 mr-2" />
                        Email Address
                      </label>
                      <input
                        type="email"
                        name="email"
                        value={formData.email}
                        onChange={handleInputChange}
                        required
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-600 focus:border-transparent text-black"
                        placeholder="Enter your email"
                      />
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          <User className="inline w-4 h-4 mr-2" />
                          First Name
                        </label>
                        <input
                          type="text"
                          name="firstName"
                          value={formData.firstName}
                          onChange={handleInputChange}
                          required
                          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-600 focus:border-transparent text-black"
                          placeholder="First name"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          <User className="inline w-4 h-4 mr-2" />
                          Last Name
                        </label>
                        <input
                          type="text"
                          name="lastName"
                          value={formData.lastName}
                          onChange={handleInputChange}
                          required
                          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-600 focus:border-transparent text-black"
                          placeholder="Last name"
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-semibold text-gray-700 mb-2">
                        <MapPin className="inline w-4 h-4 mr-2" />
                        Address
                      </label>
                      <input
                        type="text"
                        name="address"
                        value={formData.address}
                        onChange={handleInputChange}
                        required
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-600 focus:border-transparent text-black"
                        placeholder="Street address"
                      />
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          <MapPin className="inline w-4 h-4 mr-2" />
                          City
                        </label>
                        <input
                          type="text"
                          name="city"
                          value={formData.city}
                          onChange={handleInputChange}
                          required
                          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-600 focus:border-transparent text-black"
                          placeholder="City"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-semibold text-gray-700 mb-2">
                          <MapPin className="inline w-4 h-4 mr-2" />
                          Postal Code
                        </label>
                        <input
                          type="text"
                          name="postalCode"
                          value={formData.postalCode}
                          onChange={handleInputChange}
                          required
                          className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-600 focus:border-transparent text-black"
                          placeholder="Postal code"
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-semibold text-gray-700 mb-2">
                        <Phone className="inline w-4 h-4 mr-2" />
                        Phone Number
                      </label>
                      <input
                        type="tel"
                        name="phone"
                        value={formData.phone}
                        onChange={handleInputChange}
                        required
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-600 focus:border-transparent text-black"
                        placeholder="Phone number"
                      />
                    </div>
                  </>
                ) : (
                  <div className="space-y-6">
                    {/* Customer Info Summary */}
                    <div className="bg-gray-50 rounded-lg p-6">
                      <h3 className="text-lg font-semibold text-gray-900 mb-4">Customer Information</h3>
                      <div className="space-y-2 text-sm">
                        <p><span className="font-medium text-gray-900">Name:</span> <span className="text-gray-900">{formData.firstName} {formData.lastName}</span></p>
                        <p><span className="font-medium text-gray-900">Email:</span> <span className="text-gray-900">{formData.email}</span></p>
                        <p><span className="font-medium text-gray-900">Phone:</span> <span className="text-gray-900">{formData.phone}</span></p>
                        <p><span className="font-medium text-gray-900">Address:</span> <span className="text-gray-900">{formData.address}</span></p>
                        <p><span className="font-medium text-gray-900">City:</span> <span className="text-gray-900">{formData.city}, {formData.postalCode}</span></p>
                      </div>
                    </div>

                    {/* Order Items Summary */}
                    <div className="bg-gray-50 rounded-lg p-6">
                      <h3 className="text-lg font-semibold text-gray-900 mb-4">Order Items</h3>
                      <div className="space-y-4">
                        {(() => {
                          // Group items by product (name + ref + colour + supplierCode)
                          const groupedItems: { [key: string]: any[] } = {};
                          
                          state.items.forEach((item) => {
                            const key = `${item.name}-${item.ref}-${item.colour}-${item.supplierCode}`;
                            if (!groupedItems[key]) {
                              groupedItems[key] = [];
                            }
                            groupedItems[key].push(item);
                          });
                          
                          return Object.values(groupedItems).map((productGroup: any[]) => {
                            const firstItem = productGroup[0];
                            const totalQuantity = productGroup.reduce((sum, item) => sum + item.quantity, 0);
                            const totalSubtotal = productGroup.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                            
                            return (
                              <div key={firstItem.id} className="bg-white rounded-lg p-4 border border-gray-200">
                                <div className="flex items-start space-x-4">
                                  <div className="relative w-16 h-16 bg-gray-100 rounded-lg flex-shrink-0">
                                    {firstItem.image && (
                                      <Image
                                        src={firstItem.image}
                                        alt={firstItem.name}
                                        fill
                                        className="object-cover rounded-lg"
                                      />
                                    )}
                                  </div>
                                  <div className="flex-1">
                                    <h4 className="font-semibold text-gray-900 text-lg mb-2">{firstItem.name}</h4>
                                    {firstItem.ref && (
                                      <p className="text-sm text-red-600 font-medium mb-1">REF: {firstItem.ref}</p>
                                    )}
                                    {firstItem.colour && (
                                      <p className="text-sm text-gray-600 mb-1">Color: {firstItem.colour}</p>
                                    )}
                                    {firstItem.supplierCode && (
                                      <p className="text-sm text-gray-600 mb-1">Supplier Code: {firstItem.supplierCode}</p>
                                    )}
                                    <p className="text-sm text-gray-600 mb-3">Category: {firstItem.category || 'N/A'}</p>
                                    
                                    {/* Size breakdown */}
                                    <div className="bg-gray-50 rounded-lg p-3 mb-3">
                                      <h5 className="text-sm font-semibold text-gray-700 mb-2">Size Breakdown:</h5>
                                      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2">
                                        {productGroup.map((item: any, index: number) => (
                                          <div key={`${item.size}-${index}`} className="text-xs text-gray-600 bg-white px-2 py-1 rounded border">
                                            Size: {item.size} | Qty: {item.quantity}
                                          </div>
                                        ))}
                                      </div>
                                    </div>
                                    
                                    <div className="flex justify-between items-center">
                                      <div className="flex-1">
                                        <p className="text-sm text-gray-900">Wholesale Price (ex VAT): R{firstItem.price.toFixed(2)} each</p>
                                        {firstItem.retailPrice && (
                                          <p className="text-sm text-red-600 font-semibold">Recommended Retail: R{firstItem.retailPrice.toFixed(2)} each</p>
                                        )}
                                      </div>
                                      <div className="text-right">
                                        <p className="text-sm text-gray-600">Total Qty: {totalQuantity}</p>
                                        <p className="font-bold text-lg text-gray-900">R{totalSubtotal.toFixed(2)}</p>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            );
                          });
                        })()}
                      </div>
                    </div>

                    {/* Order Total */}
                    <div className="bg-gray-50 rounded-lg p-6">
                      <h3 className="text-lg font-semibold text-gray-900 mb-4">Order Total</h3>
                      <div className="space-y-2">
                        <div className="flex justify-between">
                          <span className="text-gray-900 font-medium">Subtotal (ex VAT):</span>
                          <span className="text-gray-900 font-semibold">R{subtotal.toFixed(2)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-900 font-medium">VAT (+15%):</span>
                          <span className="text-gray-900 font-semibold">R{vatAmount.toFixed(2)}</span>
                        </div>
                        <div className="flex justify-between text-lg font-bold border-t border-gray-300 pt-2">
                          <span className="text-gray-900">Total (inc VAT):</span>
                          <span className="text-gray-900">R{total.toFixed(2)}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Error Display */}
                {submissionError && (
                  <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                    <div className="flex items-center">
                      <div className="text-red-600 mr-2">❌</div>
                      <span className="text-sm text-red-800">{submissionError}</span>
                    </div>
                  </div>
                )}

                <div className="flex items-center justify-between pt-6">
                  {step === 2 && (
                    <button
                      type="button"
                      onClick={() => setStep(1)}
                      className="flex items-center text-gray-600 hover:text-gray-900 transition-colors"
                    >
                      <ChevronLeft className="w-4 h-4 mr-1" />
                      Back to Customer Info
                    </button>
                  )}
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className="ml-auto px-8 py-3 bg-gradient-to-r from-red-600 to-red-700 text-white font-semibold rounded-lg hover:from-red-700 hover:to-red-800 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? (
                      <div className="flex items-center">
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        Processing...
                      </div>
                    ) : (
                      step === 1 ? "Review Order" : "Complete Order"
                    )}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
